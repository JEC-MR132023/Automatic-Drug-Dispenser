#include <AccelStepper.h>

// Define stepper motor connections and steps per revolution
#define enPin 8
#define X_STEP_PIN 2
#define X_DIR_PIN 5
#define Y1_STEP_PIN 3
#define Y1_DIR_PIN 6
#define Y2_STEP_PIN 4
#define Y2_DIR_PIN 7

#define STEPS_PER_REV 200

// Define stepper motor objects
AccelStepper stepperX(AccelStepper::DRIVER, X_STEP_PIN, X_DIR_PIN);
AccelStepper stepperY1(AccelStepper::DRIVER, Y1_STEP_PIN, Y1_DIR_PIN);
AccelStepper stepperY2(AccelStepper::DRIVER, Y2_STEP_PIN, Y2_DIR_PIN);

void setup() {
  // Set maximum speed and acceleration for Y axes
  stepperY1.setMaxSpeed(1000.0);
  stepperY2.setMaxSpeed(1000.0);
  stepperY1.setAcceleration(500.0);
  stepperY2.setAcceleration(500.0);
  pinMode(enPin, OUTPUT);
   digitalWrite(enPin, LOW);
  
  // Set up X axis
  stepperX.setMaxSpeed(1000.0);
  stepperX.setAcceleration(500.0);
}

void loop() {
  // Move along X axis
  moveAxis(&stepperX, 100); // Move 100 steps in the positive direction for X
  
  // Move along Y1 and Y2 axes simultaneously
  moveAxes(&stepperY1, &stepperY2, 200, 200); // Move 50 steps in the negative direction for Y1 and 200 steps in the positive direction for Y2
}

// Function to move specified stepper motor a certain number of steps
void moveAxis(AccelStepper *stepper, long steps) {
  stepper->move(steps);
  while (stepper->distanceToGo() != 0) {
    stepper->run();
  }
}

// Function to move specified Y-axis stepper motors simultaneously
void moveAxes(AccelStepper *stepperY1, AccelStepper *stepperY2, long stepsY1, long stepsY2) {
  stepperY1->move(stepsY1);
  stepperY2->move(stepsY2);
  
  // Find the maximum distance to go among Y-axis motors
  long maxDistance = max(abs(stepsY1), abs(stepsY2));

  // Run Y-axis motors simultaneously until the maximum distance is covered
  while (maxDistance > 0) {
    if (stepperY1->distanceToGo() != 0) stepperY1->run();
    if (stepperY2->distanceToGo() != 0) stepperY2->run();
    
    // Update maximum distance to go
    maxDistance = max(abs(stepperY1->distanceToGo()), abs(stepperY2->distanceToGo()));
  }
}
